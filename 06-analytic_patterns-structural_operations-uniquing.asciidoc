== Analytic Patterns: Finding Duplicate and Unique Records

==== Eliminating Duplicate Records from a Table

The park_teams table has a row for every season. To find every distinct pair of team and home ballpark, use the DISTINCT operator. This is equivalent to the SQL statement `SELECT DISTINCT player_id, team_id from batting;`.

------
tm_pk_pairs_many = FOREACH park_teams GENERATE team_id, park_id;
tm_pk_pairs = DISTINCT tm_pk_pairs_many;
-- -- ALT     ALT01
-- -- ANA     ANA01
-- -- ARI     PHO01
-- -- ATL     ATL01
-- -- ATL     ATL02
------

Don't fall in the trap of using a GROUP statement to find distinct values:

------
dont_do_this = FOREACH (GROUP tm_pk_pairs_many BY (team_id, park_id)) GENERATE
  group.team_id, group.park_id;
------

The DISTINCT operation is able to use a combiner, eliminating duplicates at the mapper before shipping them to the reducer. This is a big win when there are frequent duplicates, especially if duplicates are likely to occur near each other. For example, duplicates in web logs (from refreshes, callbacks, etc) will be sparse globally, but found often in the same log file.

The combiner may impose a minor penalty when there are very few or very sparse duplicates. In that case, you should still use DISTINCT, but disable combiners with the `pig.exec.nocombiner=true` setting.

------
  -- Every team a player has played for
SELECT DISTINCT player_id, team_id from batting;
------

==== Eliminating Duplicate Records from a Group

Eliminate duplicates from a group with the DISTINCT operator inside a nested foreach. Instead of finding every distinct (team, home ballpark) pair as we just did, let's find the list of distinct home ballparks for each team:

------
team_parkslist = FOREACH (GROUP park_teams BY team_id) {
  parks = DISTINCT park_teams.park_id;
  GENERATE group AS team_id, BagToString(parks, '|');
};

EXPLAIN team_parkslist;

-- -- CL1     CHI02|CIN01|CLE01
-- -- CL2     CLE02
-- -- CL3     CLE03|CLE09|GEA01|NEW03
-- -- CL4     CHI08|CLE03|CLE05|CLL01|DET01|IND06|PHI09|ROC02|ROC03|STL05
------

------
SELECT team_id, GROUP_CONCAT(DISTINCT park_id ORDER BY park_id) AS park_ids
  FROM park_team_years
  GROUP BY team_id
  ORDER BY team_id, park_id DESC
  ;
------

==== Eliminating All But One Duplicate Based on a Key

The DataFu `DistinctBy` UDF selects a single record for each key in a bag.

It has the nice feature of being order-preserving: only the first record for a key is output, and all records that make it to the output follow the same relative ordering they had in the input bag,

This gives us a clean way to retrieve the distinct teams a player served in, along with the first and last year of their tenure:define DistinctBy

------
DEFINE DistinctByYear datafu.pig.bags.DistinctBy('0');

pltmyrs = FOREACH bat_seasons GENERATE player_id, year_id, team_id;
player_teams = FOREACH (GROUP pltmyrs BY player_id) {
  -- TODO does this use secondary sort, or cause a POSort?
  pltmyrs_o = ORDER pltmyrs.(team_id, year_id) BY team_id;
  pltmyrs = DistinctByYear(pltmyrs);
  GENERATE player_id, BagToString(pltmyrs, '|');
};
------

The key is specified with a string argument in the DEFINE statement, naming the positional index(es) of the key's fields as a comma-separated list.

==== Selecting Records with Unique (or with Duplicate) Values for a Key

The DISTINCT operation is useful when you want to eliminate duplicates based on the whole record. But to instead find only rows having a unique
record for its key, or to find only rows having multiple records for its key, do a GROUP BY and then filter on the size of the resulting bag.

On a broadcast a couple years ago, announcer Tim McCarver paused from his regular delivery of the obvious and the officious to note that second baseman Asdrubal Cabrera "is the only player in the majors with that first name". This raises the question: how many other people in the history of baseball similarly are uniquely yclept footnote:[yclept /iˈklept/: by the name of; called.]?

------
uniquely_yclept_g = GROUP   people BY name_first;
uniquely_yclept_f = FILTER  uniquely_yclept_g BY COUNT_STAR(people) == 1;
uniquely_yclept   = FOREACH uniquely_yclept_f GENERATE
  group AS name_first,
  FLATTEN(people.(name_last, player_id, beg_date, end_date)) AS (name_last, player_id, beg_date, end_date);
------

Some of you may be familiar with Honus Wagner, Eppa Rixey, Boog Powell or Yogi Berra. But have you heard recounted the storied diamond exploits of Firpo Mayberry, Zoilo Versalles, Pi Schwert or Bevo LeBourveau?  OK, then how about Mysterious Walker, The Only Nolan, or Phenomenal Smith?  Mul Holland, Sixto
Lezcano, Welcome Gaston or Mox McQuery?  Try asking your spouse to that your next child be named for Urban Shocker, Twink Twining, Pussy Tebeau, Bris
Lord, Boob Fowler, Crazy Schmit, Creepy Crespi, Cuddles Marshall, Vinegar Bend Mizell, or Buttercup Dickerson.

.SQL Equivalent for "Selecting Records with Unique Values for a Key"
------
SELECT nameFirst, nameLast, COUNT(*) AS n_usages
  FROM people
  WHERE    nameFirst IS NOT NULL
  GROUP BY nameFirst
  HAVING   n_usages = 1
  ORDER BY nameFirst
  ;
------

==== More fun with uniques

* Counting Missing Values
* Counting and Identifying Duplicates

==== Identifying duplicated records for a key

  -- group by, then emit bags with more than one size; call back to the won-loss example

Once again, what starts out looking like one of the high-level operations turns into a GROUP BY.

Up above, the allstar table almost led us astray due to the little-known fact that some years featured multiple All-Star games. We can pull out the rows matching those fields:

------
  -- Teams who played in more than one stadium in a year
SELECT COUNT(*) AS n_parks, pty.*
  FROM park_team_years pty
  GROUP BY team_id, year_id
  HAVING n_parks > 1
------

(Do this with games table?)

==== Eliminating rows that have a duplicated value

(ie the whole row isn't distinct, just the field you're distinct-ing on.)
Note: this chooses an arbitrary value from each group

------
SELECT COUNT(*) AS n_asg, ast.*
  FROM allstarfull ast
  GROUP BY year_id, player_id
  HAVING n_asg > 1
  ;
------

=== Set Operations

Set operations -- intersection, union, set difference and so forth -- are a valuable strategic formulation for the structural operations we've been learning. In terms of set operations, "Which users both clicked on ad for shirts and bought a shirt?" becomes "find the intersection of shirt-ad-clickers set with the shirt-buyers set". "What patients either were ill but did not test positive, or tested positive but were not ill?" becomes "find the symmetric difference of the actually-ill patients and the tested-positive patients". The relational logic that powers traditional database engines is, at its core, the algebra of sets. We've actually met many of the set operations in certain alternate guises, but set operations are so important it's worth calling them out specifically.

When we say 'set', we mean an unordered collection of distinct elements. Those elements could be full records, or they could be key fields in a record -- allowing us to intersect the shirt-ad-clickers and the shirt-buyers while carrying along information about the ad they clicked on and the shirt they bought.

In the next several sections, you'll learn how to combine sets in the following ways:

* 'Distinct Union' (`A ∪ B`)	  -- all distinct elements that are in 'A' or in 'B'.
* 'Set Intersection' (`A ∩ B`)	  -- all distinct elements that are in 'A' and also in 'B'.
* 'Set Difference' (`A - B`)	  -- all distinct elements that are in 'A' but are _not_ in 'B'.
* 'Symmetric Difference' (`a ^ b`) -- all distinct elements that are in 'A' or in 'B' but not both. Put another way, it's all distinct elements that are in 'A' but not 'B' as well as all distinct elements that are in 'B' but not 'A'.
* 'Set Equality' (`A == B`)  -- every element in 'A' is also in 'B'. The result of the set equality operation is a boolean true or false, as opposed to a set as in the above operations.


The following table may help. The rows correspond to the kind of elements that are in both A and B; A but not B; and B but not A. Under the column for each operator, only the kinds of elements marked 'T' will be present in the result.

.Set Operation Membership
------
                        Union   Inters  Diff    Diff    Sym.Diff
	 A	 B	A∪B	A∩B	a-b	b-a	a^b
A B	 T	 T	 T	 T	 -	 -	 -
A -	 T	 -	 T	 -	 T	 -	 T
- B	 -	 T	 T	 -	 -	 T	 T
------

The mechanics of working with sets depends on whether the set elements are represented as records in a bag or as rows in a full table. Set operations on bags are particularly straightforward thanks to the purpose-built UDFs in the Datafu package. Set operations on tables are done using a certain `COGROUP`-and-`FILTER` combination -- wordier, but no more difficult. Let's start with the patterns that implement set operations on full tables.


==== Set Operations on Full Tables

To demonstrate full-table set operations, we can relate the set of major US cities footnote:[We'll take "major city" to mean one of the top 60 incorporated places in the United States or Puerto Rico; see the "Overview of Datasets" (REF) for source information]
with the set of US cities that have hosted a significant number (more than 50) of major-league games. To prove a point about set operations with duplicates, we will leave in the duplicates from the team cities (the Mets and Yankees both claim NY).

.Preparation for Set Operations on Full Tables
------
parks        = load_parks();
main_parks   = FILTER parks BY n_games >=  50 AND country_id == 'US';
major_cities = load_us_city_pops();
--
bball_city_names = FOREACH main_parks   GENERATE city;
major_city_names = FOREACH major_cities GENERATE city;
------

==== Distinct Union

If the only contents of the tables are the set membership keys, finding the
distinct union is done how it sounds: apply union, then distinct.

------
major_or_bball    = DISTINCT (UNION bball_city_names, major_city_names);
------

==== Distinct Union (alternative method)

For all the other set operations, or when the elements are keys within a record (rather than the full record), we will use some variation on a COGROUP to generate the result.

// Every row in combined comes from one table or the other, so we don't need to
// filter.  To prove the point about doing the set operation on a key (rather
// than the full record) let's keep around the state, population, and all
// park_ids from the city.

------
combined     = COGROUP major_cities BY city, main_parks BY city;

major_or_parks    = FOREACH combined GENERATE
  group AS city,
  FLATTEN(FirstTupleFromBag(major_cities.(state, pop_2011), ((chararray)NULL,(int)NULL))),
  main_parks.park_id AS park_ids;
------

The DataFu `FirstTupleFromBag` UDF is immensely simplifying. Since the city value is a unique key for the `major_cities` table, we know that the `major_cities` bag has only a single element. Applying `FirstTupleFromBag` turns the bag-of-one-tuple into a tuple-of-two-fields, and applying `FLATTEN` lifts the tuple-of-two-fields into top-level fields for state and for population. When the `city` key has no match in the `major_cities` table, the second argument to FirstTupleFromBag forces those fields to have `NULL` values.

As we mentioned, there are potentially many park records for each city, and so the main_parks bag can have zero, one or many records. Above, we keep the list of parks around as a single field.

==== Set Intersection

Records lie in the set intersection when neither bag is empty.

------
major_and_parks_f = FILTER combined BY
  (COUNT_STAR(major_cities) > 0L) AND (COUNT_STAR(main_parks) > 0L);
major_and_parks   = FOREACH major_and_parks_f GENERATE
  group AS city,
  FLATTEN(FirstTupleFromBag(major_cities.(state, pop_2011), ((chararray)NULL,(int)NULL))),
  main_parks.park_id AS park_ids;
------

Two notes. First, we test against `COUNT_STAR(bag)`, and not `SIZE(bag)` or `IsEmpty(bag)`. Those latter two require actually materializing the bag -- all the data is sent to the reducer, and no combiners can be used. Second, since COUNT_STAR returns a value of type long, it's best to do the comparison against `0L` (a long) and not `0` (an int).

==== Set Difference

Records lie in A minus B when the second bag is empty, and they lie in B minus A when the first bag is empty.

------
major_minus_parks_f = FILTER combined BY (COUNT_STAR(main_parks) == 0L);
major_minus_parks   = FOREACH major_minus_parks_f GENERATE
  group AS city,
  FLATTEN(FirstTupleFromBag(major_cities.(state, pop_2011), ((chararray)NULL,(int)NULL))),
  main_parks.park_id AS park_ids;

parks_minus_major_f = FILTER combined BY (COUNT_STAR(major_cities) == 0L);
parks_minus_major   = FOREACH parks_minus_major_f GENERATE
  group AS city,
  FLATTEN(FirstTupleFromBag(major_cities.(state, pop_2011), ((chararray)NULL,(int)NULL))),
  main_parks.park_id AS park_ids;
------

==== Symmetric Set Difference: (A-B)+(B-A)

Records lie in the symmetric difference when one or the other bag is
empty. (We don't have to test for them both being empty -- there wouldn't be
a row if that were the case.)

------
major_xor_parks_f   = FILTER combined BY
  (COUNT_STAR(major_cities) == 0L) OR (COUNT_STAR(main_parks) == 0L);

major_xor_parks     = FOREACH major_xor_parks_f GENERATE
  group AS city,
  FLATTEN(FirstTupleFromBag(major_cities.(state, pop_2011), ((chararray)NULL,(int)NULL))),
  main_parks.park_id AS park_ids;
------

==== Set Equality

Set Equality indicates whether the elements of each set are identical -- here, would tell us whether the set of keys in the major_cities table and the set of keys in the main_parks table were
identical.

There are several ways to determine full-table set equality, but likely the most efficient is to see whether the two sets' symmetric difference is empty. An empty symmetric difference implies that every element of 'A' is in 'B', and that every element of 'B' is in 'A' -- which is exactly what it means for two sets to be equal.

// (There are alternative tests described later under "Set Operations within Groups" (REF), but unless you're already calculating one of the set operations above you should use the "symmetric difference is empty" test.

Properly testing whether a table is empty so is a bit more fiddly than you'd think. To illustrate the problem, first whip up a set that should compare as equal to the `major_cities` table, run the symmetric difference stanza from above, and then test whether the table is empty:

------
major_city_names_also = FOREACH major_cities GENERATE city;
major_xor_major = FILTER
  (COGROUP major_city_names BY city, major_city_names_also BY city)
  BY ((COUNT_STAR(major_city_names) == 0L) OR (COUNT_STAR(major_city_names_also) == 0L));

-- Does not work
major_equals_major_fail = FOREACH (GROUP major_xor_major ALL) GENERATE
   (COUNT_STAR(major_xor_major) == 0L ? 1 : 0) AS is_equal;
------

The last statement of the code block attempts to measure whether the count of records in `major_xor_major` is zero. And if the two tables were unequal, this would have worked. But `major_xor_major` is empty and so _the FOREACH has no lines to operate on_. The output file is not a
`1` as you'd expect, it's an empty file.

Our integer table to the rescue! Actually we'll use her baby brother 'one_line.tsv': it has one record, with fields uno (value `1`) and zilch (value `0`). Instead of a `GROUP..ALL`, do a COGROUP of one_line on a constant value `1`. Since there is exactly one possible value for the group key, there will be exactly one row in the output.

------
one_line = LOAD '$data_dir/stats/numbers/one_line.tsv' AS (uno:int, zilch:int);

-- will be `1` (true)
major_equals_major = FOREACH (COGROUP one_line BY 1, major_xor_major BY 1)
  GENERATE (COUNT_STAR(major_xor_major) == 0L ? 1 : 0) AS is_equal;

-- will be `0` (false)
major_equals_parks = FOREACH (COGROUP one_line BY 1, major_xor_parks BY 1)
  GENERATE (COUNT_STAR(major_xor_parks) == 0L ? 1 : 0) AS is_equal;
------

TODO: clean up transition to set ops on groups

To demonstrate set operations on grouped records, let's look at the
year-to-year churn of mainstay players footnote:[using our definition of a
significant season: post-1900 and 450 or more plate appearances] on each
team.

Other applications of the procedure we follow here would include analyzing
how the top-10 products on a website change over time, or identifying sensors
that report values over threshold in N consecutive hours (by using an N-way
COGROUP).

==== Constructing a Sequence of Sets

To construct a sequence of sets, perform a self-cogroup that collects the
elements from each sequence key into one bag and the elements from the next
key into another bag. Here, we group together the roster of players for a
team's season (that is, players with a particular `team_id` and `year_id`)
together with the roster of players from the following season (players with
the same `team_id` and the subsequent `year_id`).

Since it's a self-cogroup, we must do a dummy projection to make new aliases
(see the earlier section on self-join for details).

-----
y1 = FOREACH sig_seasons GENERATE player_id, team_id, year_id;
y2 = FOREACH sig_seasons GENERATE player_id, team_id, year_id;

-- Put each team of players in context with the next year's team of players
year_to_year_players = COGROUP
  y1 BY (team_id, year_id),
  y2 BY (team_id, year_id-1)
  ;
-- Clear away the grouped-on fields
rosters = FOREACH year_to_year_players GENERATE
  group.team_id AS team_id,
  group.year_id AS year_id,
  y1.player_id  AS pl1,
  y2.player_id  AS pl2
  ;
-- The first and last years of existence don't have anything interesting to compare, so reject them.
rosters = FILTER rosters BY (COUNT_STAR(pl1) == 0L OR COUNT_STAR(pl2) == 0L);
-----

==== Set Operations Within a Group

The content of `rosters` is a table with two key columns: team and year; and
two bags: the set of players from that year and the set of players from the
following year.

Applying the set operations lets us describe the evolution of the team from
year to year.

------
roster_changes_y2y = FOREACH rosters {
  -- Distinct Union (doesn't need pre-sorting)
  either_year  = SetUnion(pl1, pl2);
  -- The other operations require sorted bags.
  pl1_o = ORDER pl1 BY player_id;
  pl2_o = ORDER pl2 BY player_id;

  -- Set Intersection
  stayed      = SetIntersect(pl1_o, pl2_o);
  -- Set Difference
  y1_departed = SetDifference(pl1_o, pl2_o);
  y2_arrived  = SetDifference(pl2_o, pl1_o);
  -- Symmetric Difference
  non_stayed  = DIFF(y1_departed, y2_arrived);
  -- Set Equality
  is_equal    = ( (COUNT_STAR(non_stayed) == 0L) ? 1 : 0);

  GENERATE year_id, team_id,
    either_year, stayed, y1_departed, y2_arrived, non_stayed, is_equal;
};
------

The Distinct Union (A union B, which we'll find using the DataFu `SetUnion` UDF) describes players
on the roster in either year of our two-year span.

------
  either_year  = SetUnion(pl1, pl2);
------

All the DataFu set operations here tolerate inputs containing duplicates, and all of them return
bags that contain no duplicates. They also each accept two or more bags, enabling you to track
sequences longer than two adjacent elements.

As opposed to SetUnion, the other set operations require sorted inputs. That's not as big a deal as
if we were operating on a full table, since a nested ORDER BY makes use of Hadoop's secondary
sort. As long as the input and output bags fit efficiently in memory, these operations are
efficient.

------
  pl1_o = ORDER pl1 BY player_id;
  pl2_o = ORDER pl2 BY player_id;
------

The Set Intersection (A intersect B, which we'll find using the DataFu
SetIntersect UDF) describes the players that played in the first year and
also stayed to play in the second year.

------
  stayed      = SetIntersect(pl1_o, pl2_o);
------

The Set Difference (A minus B, using the SetDifference UDF) contains the elements in the first bag
that are not present in the remaining bags.  The first line therefore describes players that did
_not_ stay for the next year, and the second describes players that newly arrived in the next year.

------
  y1_departed = SetDifference(pl1_o, pl2_o);
  y2_arrived  = SetDifference(pl2_o, pl1_o);
------

The Symmetric Difference contains all elements that are in one set or the other but not both.  You
can find this using either `(A minus B) union (B minus A)` -- players who either departed after the
first year or newly arrived in the next year -- or `((A union B) minus (A intersect B))` -- players
who were present in either season but not both seasons.

------
  non_stayed  = SetUnion(y1_departed, y2_arrived);
------

Set Equality indicates whether the elements of each set are identical --
here, it selects seasons where the core set of players remained the
same. There's no direct function for set equality, but you can repurpose
any of the set operations to serve.

If A and B each have no duplicate records, then A and B are equal if and only if

* `size(A) == size(B) AND size(A union B) == size(A)`
* `size(A) == size(B) AND size(A intersect B) == size(A)`
* `size(A) == size(B) AND size(A minus B) == 0`
* `size(symmetric difference(A,B)) == 0`

For multiple sets of distinct elements, `A, B, C...` are equal if and only
if all the sets and their intersection have the same size:
`size(intersect(A,B,C,...)) == size(A) == size(B) == size(C) == ...`

If you're already calculating one of the functions, use the test that
reuses its result. Otherwise, prefer the A minus B test if most rows will
have equal sets, and the A intersect B test if most will not or if there
are multiple sets.

------
  is_equal    = ( (COUNT_STAR(non_stayed) == 0L) ? 1 : 0);
------


//   n_pl1         = SIZE(pl1);
//   n_pl2         = SIZE(pl2);
//   n_union       = SIZE(either_year);
//   n_intersect   = SIZE(stayed);
//   n_y1_minus_y2 = SIZE(y1_departed);
//   n_y2_minus_y1 = SIZE(y2_arrived);
//   n_xor         = SIZE(non_stayed);
//   is_equal_via_union     = ( ((n_pl1 == n_pl2) AND (n_union       == n_pl1)) ? 1 : 0);
//   is_equal_via_intersect = ( ((n_pl1 == n_pl2) AND (n_intersect   == n_pl1)) ? 1 : 0);
//   is_equal_via_minus     = ( ((n_pl1 == n_pl2) AND (n_y1_minus_y2 == 0L))    ? 1 : 0);
//   is_equal_via_xor       = ( (n_xor == 0L) ? 1 : 0);
//
//   GENERATE
//     year_id, team_id,
//     n_pl1            AS n_pl1,
//     n_pl2            AS n_pl2,
//     --
//     n_union          AS n_union,
//     n_intersect      AS n_intersect,
//     n_y1_minus_y2    AS n_y1_minus_y2,
//     n_y2_minus_y1    AS n_y2_minus_y1,
//     n_xor            AS n_xor,
//     --
//     either_year      AS either_year,
//     stayed           AS stayed,
//     y1_departed      AS y1_departed,
//     y2_arrived       AS y2_arrived,
//     non_stayed       AS non_stayed,
//     --
//     is_equal_via_xor AS is_equal
//     ;
// };
// ------

// **Exercises**
//
// * Implement a set equality UDF and submit it as an open-source contribution to
//   the DataFu project. Suggestions:
//
//   - Modify the datafu.pig.sets.SetIntersect UDF to return boolean false
//   - It should return immediately on finding an element that does not lie
//     within the intersection.
//   - Set the contract to require that each input bag is distinct (contains no
//     duplicate elements). This will let you quickly reject as not equal any
//     bags of different size.
//
// * Modify the set operations UDFs to meet the accumulator interface (see
//   chapter on Advanced Pig for details)
//
// * Using the waxy.org web logs dataset, identify how the top 10 pages by
//   visits change over time.
//
// * Identify possibly abusive visitors in the waxy.org web logs:
//   - Calculate the amount of data transferred to each IP address in each
//     six-hour period
//   - Select heavy downloaders using either the z-score or percentile ranking
//     of their data volume, as described in the "identifying outliers" section.
//   - Use the procedure in the "set operations within groups" section to find
//     IP addresses that exceed your heavy-downloader threshold for four
//     consecutive six-hour blocks.
//   This sequence of actions is particularly useful for analysis of security or
//   sensor logs, where you are looking for things that are over threshold for
//   extended durations but not enough to trigger alarms.
