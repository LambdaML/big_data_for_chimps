==== The Quadtile Grid System ====

// We'll start by adopting the simple, flat Mercator projection -- directly map longitude and latitude to (X,Y). This makes geographers cringe, because of its severe distortion at the poles, but its computational benefits are worth it. footnote:[Two guides for which map projection to choose: http://www.radicalcartography.net/?projectionref http://xkcd.com/977/ . As you proceed to finer and finer zoom levels the projection distortion becomes less and less relevant, so the simplicity of Mercator or Equirectangular are appealing.]

The quadtile trick is to the world into four and make a Z pattern across them:

Within each of those, make a <<z_path_of_quadtiles, Z again>>:

[[z_path_of_quadtiles]]
.Z-path of quadtiles
image::images/quadkeys-nearby_points_are_nearby.png[Z-path of quadtiles]

As you go along, index each tile, as shown in <<quadtile_numbering>>:

[[quadtile_numbering]]
.Quadtile Numbering
image::images/quadkeys-numbering-zl0-zl1.png[quadtile numbering]

This is a 1-d index into a 2-d space! What's more, nearby points in space are typically nearby in index value. By applying Hadoop's fundamental locality operation -- sorting -- geographic locality falls out of numerical locality.

Note: you'll sometimes see people refer to quadtile coordinates as `X/Y/Z` or `Z/X/Y`; the 'Z' here refers to zoom level, not a traditional third coordinate.

[[quadkey]]
=== Quadtile Practicalities ===

==== Converting points to quadkeys (quadtile indexes)

Each grid cell is contained in its parent

image::images/quadkeys-numbering-select_down.png[Tile index for central Texas]

You can also think of it as a tree:

image::images/quadkeys-3d-stack.png[Z-path of quad tiles]

The quadkey is a string of 2-bit tile selectors for a quadtile

@example
  infochimps_hq = Geo::Place.receive("Infochimps HQ", -97.759003, 30.273884)
  infochimps_hq.quadkey(8) # => "02313012"

First, some preliminaries:

    EARTH_RADIUS      =  6371000 # meters
    MIN_LONGITUDE     = -180
    MAX_LONGITUDE     =  180
    MIN_LATITUDE      = -85.05112878
    MAX_LATITUDE      =  85.05112878
    ALLOWED_LONGITUDE = (MIN_LONGITUDE..MAX_LONGITUDE)
    ALLOWED_LATITUDE  = (MIN_LATITUDE..MAX_LATITUDE)
    TILE_PIXEL_SIZE   =  256

    # Width or height in number of tiles
    def map_tile_size(zl)
      1 << zl
    end

The maximum latitude this projection covers is plus/minus `85.05112878` degrees. With apologies to the elves of chapter (TODO: ref), this is still well north of Alert, Canada, the northernmost populated place in the world (latitude 82.5 degrees, 817 km from the North Pole).

It's straightforward to calculate tile_x indices from the longitude (because all the brutality is taken up in the Mercator projection's severe distortion).

Finding the Y tile index requires a slightly more complicated formula:

This makes each grid cell be an increasingly better locally-flat approximation to the earth's surface, palliating the geographers anger at our clumsy map projection.

In code:

    # Convert longitude, latitude in degrees to _floating-point_ tile x,y coordinates at given zoom level
    def lat_zl_to_tile_yf(longitude, latitude, zl)
      tile_size = map_tile_size(zl)
      xx = (longitude.to_f + 180.0) / 360.0
      sin_lat = Math.sin(latitude.to_radians)
      yy = Math.log((1 + sin_lat) / (1 - sin_lat)) / (4 * Math::PI)
      #
      [ (map_tile_size(zl) * xx).floor,
        (map_tile_size(zl) * (0.5 - yy)).floor ]
    end

    # Convert from tile_x, tile_y, zoom level to longitude and latitude in
    # degrees (slight loss of precision).
    #
    # Tile coordinates may be floats or integer; they must lie within map range.
    def tile_xy_zl_to_lng_lat(tile_x, tile_y, zl)
      tile_size = map_tile_size(zl)
      raise ArgumentError, "tile index must be within bounds ((#{tile_x},#{tile_y}) vs #{tile_size})" unless ((0..(tile_size-1)).include?(tile_x)) && ((0..(tile_size-1)).include?(tile_x))
      xx =       (tile_x.to_f / tile_size)
      yy = 0.5 - (tile_y.to_f / tile_size)
      lng = 360.0 * xx - 180.0
      lat = 90 - 360 * Math.atan(Math.exp(-yy * 2 * Math::PI)) / Math::PI
      [lng, lat]
    end

[NOTE]
=========================
Take care to put coordinates in the order "longitude, latitude", maintaining consistency with the (X, Y) convention for regular points. Natural english idiom switches their order, a pernicious source of error -- but the convention in http://www.geojson.org/geojson-spec.html#positions[geographic systems] is unambiguously to use `x, y, z` ordering. Also, don't abbreviate longitude as `long` -- it's a keyword in pig and other languages. We like `lng`.
=========================

==== Interesting quadtile properties ====

* The quadkey's length is its zoom level.

* To zoom out (lower zoom level, larger quadtile), just truncate the
  quadkey: austin at ZL=8 has quadkey "02313012"; at ZL=3, "023"

* Nearby points typically have "nearby" quadkeys: up to the smallest
  tile that contains both, their quadkeys will have a common prefix.
  If you sort your records by quadkey,
  - Nearby points are nearby-ish on disk. (hello, HBase/Cassandra
    database owners!) This allows efficient lookup and caching of
    "popular" regions or repeated queries in an area.
  - the tiles covering a region can be covered by a limited, enumerable
    set of range scans. For map-reduce programmers, this leads to very
    efficient reducers

* The quadkey is the bit-interleaved combination of its tile ids:

      tile_x      58  binary  0  0  1  1  1  0  1  0
      tile_y      105 binary 0  1  1  0  1  0  0  1
      interleaved     binary 00 10 11 01 11 00 01 10
      quadkey                 0  2  3  1  3  0  1  2 #  "02313012"
      packed                 11718

* You can also form a "packed" quadkey -- the integer formed by interleaving the bits as shown above. At zoom level 15, the packed quadkey is a 30-bit unsigned integer -- meaning you can store it in a pig `int`; for languages with an `unsigned int` type, you can go to zoom level 16 before you have to use a less-efficient type. Zoom level 15 has a resolution of about one tile per kilometer (about 1.25 km/tile near the equator; 0.75 km/tile at London's latitude). It takes 1 billion tiles to tile the world at that scale.

* a limited number of range scans suffice to cover any given area
* each grid cell's parents are a 2-place bit shift of the grid index itself.

A 64-bit quadkey -- corresponding to zoom level 32 -- has an accuracty of better than 1 cm over the entire globe. In some intensive database installs, rather than storing longitude and latitude separately as floating-point numbers, consider storing either the interleaved packed quadkey, or the individual 32-bit tile ids as your indexed value. The performance impact for Hadoop is probably not worth it, but for a database schema it may be.

=== Quadtile Ready Reference ===

image::images/quadkey_ref-zoom_levels.png[Quadtile properties and data storage sizes by zoom level]

Though quadtile properties do vary, the variance is modest within most of the inhabited world:

image::images/quadkey_ref-world_cities.png[Quadtile Properties for major world cities]

The (ref table) gives the full coordinates at every zoom level for our exemplar set.

image::images/quadkey_ref-full_props-by_zl.png[Coordinates at every zoom level for some exemplars]
