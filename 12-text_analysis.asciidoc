[[text_data]]
== Text Data

=== Geographical Flavor

1. article -> wordbag  
2. join on page data to get geolocation
3. use pagelinks to get larger pool of implied geolocations
4. turn geolocations into quadtile keys
5. aggregate topics by quadtile
6. take summary statistics aggregated over term and quadkey
7. combine those statistics to identify terms that occur more frequently than the base rate would predict
8. explore and validate the results                              
9. filter to find strongly-flavored words, and other reductions of the data for visualization

=== Geographic Flavor ===

There's no better example of data that is huge, unruly, organic, highly-dimensional and deeply connected than Wikipedia. Six million articles having XXX million associated properties and connected by XXX million links are viewed by XXX million people each year (TODO: add numbers). The full data -- articles, properties, links and aggregated pageview statistics -- is free for anyone to access it. (See the <<overview_of_datasets>> for how.)

The Wikipedia community have attach the latitude and longitude to more than a million articles: not just populated places like Austin, TX, but landmarks like the University of Texas' Memorial Stadium, Snow's BBQ ("The Best Texas BBQ in the World") and the TACC (Texas Advanced Computer Center, home of the world's largest academic supercomputer). This lets us put not just each article, but the cloud of data around it, in geographical context.

What happens if we apply this context to not just the article, but those articles' words? Barbeque is popular all through Texas and the Southeastern US -- is the term "Barbeque" overrepresented in articles from that region? We can brainstorm a few more terms with strong place affinity, like "beach" (the coasts) or "wine" (France, Napa Valley), and ones without, like "hat" or "couch". Hadoop, combined with the Wikipedia dataset, will let us _rigorously_ identify words with this kind of geographic flavor, along with the locales they have affinity for.

At a high level, what we'll do is this:

* Divide the world into grid cells, and group all the words in wikipedia onto their article's grid cell
* Determine the overall frequency of each word in the wikipedia corpus
* Identify prominent (unusually frequent) words on each grid cell
* Identify words that are prominent on a large number of grid cells -- these have strong geographic "flavor"


=== Match Wikipedia Article Text with Article Geolocation

Let's start by assembling the data we need. The wikipedia dataset has three different tables for each article: the metadata for each page (page id, title, size, last update time, and so); the full text of each article (a very large field); and the article geolocations. Below are snippets from the articles table and of the geolocations table:

[[wp_lexington_article]]
._Wikipedia article record for "Lexington, Texas"_
------
Lexington,_Texas  Lexington is a town in Lee County, Texas, United States. ... Snow's BBQ, which Texas Monthly called "the best barbecue in Texas" and The New Yorker named "the best Texas BBQ in the world" is located in Lexington.
------


[[wp_coords]]
._Article coordinates_
------
Lexington,_Texas -97.01 30.41 023130130
------

Since we want to place the words in each article in geographic context, our first step is to reunite each article with its geolocation.

----
article_text = LOAD ('...');
article_geolocations = LOAD('...');
articles = JOIN article_geolocations BY page_id, article_text BY page_id;
articles = FOREACH articles GENERATE article_text::page_id, QUADKEY(lng, lat) as quadcell, text;
----

The quadkey field you see is a label for the grid cell containing an article's location; you'll learn all about them in the <<quadkey,"Geographic Data">> chapter, but for the moment just trust us that it's a clever way to divide up the world map for big data computation. Here's the result:

[[wp_lexington_wordbag_and_coords]]
._Wordbag with coordinates_
------
Lexington,_Texas 023130130 Lexington is a town in Lee County, Texas ...
------

=== Decompose Wikipedia Articles

Next, we will summarize each article by preparing its "word bag" -- a simple count of the terms on its wikipedia page. We've written a Pig UDF (User-Defined Function) to do so:

----
REGISTER path/to/udf ...;
wordbags = FOREACH articles {
    wds = WORDBAG(text)
      AS tuple(tot_usages:long, num_terms:long, num_onces:long,
         wordbag:bag{tuple(article_term_usages,term)});
    GENERATE page_id, quadcell, wds.tot_usages, wds.num_terms, wds.num_onces, wds.wordbag;
};
term_article_freqs = FOREACH wordbags GENERATE
    page_id, quadcell, tot_usages, num_terms, FLATTEN(wordbag);
STORE term_article_freqs INTO '/data/work/geo_flavor/term_article_freqs;
----

Here's the <<wp_lexington_wordbag,output>>:

[[wp_lexington_wordbag]]
._Wordbag for "Lexington, Texas"_
------
Lexington,_Texas 023130130 TODO:tot_usages TODO:terms TODO:NUMONCES {(4,"texas")(2,"lexington"),(2,"best"),(2,"bbq"),(1,"barbecue"), ...}
------

And the output after the flatten:

[[wp_lexington_wordbag]]
._"term_cell_freqs" result_
------
Lexington,_Texas 023130130 tot_usages num_terms 4   "texas"
Lexington,_Texas 023130130 tot_usages num_terms 2   "lexington"
Lexington,_Texas 023130130 tot_usages num_terms 2   "best"
Lexington,_Texas 023130130 tot_usages num_terms 2   "bbq"
Lexington,_Texas 023130130 tot_usages num_terms 1   "barbecue"
------


=== Term Statistics by Grid Cell

----
taf_g = GROUP term_article_freqs BY quadcell, term;
cell_freqs = FOREACH taf_g GENERATE
      group.quadcell AS quadcell,
      group.term AS term,
      SUM(term_article_freqs.article_term_usages) AS cell_term_usages;
cf_g = GROUP cell_freqs BY quadcell;
term_cell_freqs = FOREACH cf_g GENERATE
    group AS quadcell,
    SUM(cell_term_usages) AS cell_usages
    FLATTEN(cell_term_usages, term);
----

._"cell_freqs" result_
----
023130130 7 "bbq"
023130130 20 "texas"
----

._"cf_g" result_
----
023130130 {(7,"bbq"),(20,"texas"),...}
----

._"term_cell_freqs" result_
----
023130130 95 7 "bbq"
023130130 95 20 "texas"
----

=== Term Statistics

We will be defining the prominence of a term on a grid cell by comparing its local frequency to the overall frequency of the term. The occurrence frequency of the term "the" is XX parts per million (ppm), while that of "barbeque"'s is XX ppm. However, on the quadcell surrounding Lexington, Texas, "the" occurs at XX ppm and "barbeque" at XX ppm -- a significantly elevated rate.

Let's now prepare those global statistics.

----
all_terms = GROUP term_article_freqs BY term;
term_info_1 = FOREACH all_terms GENERATE
    group AS term,
    COUNT_STAR(term_article_freqs) AS num_articles,
    SUM(article_term_usages) AS term_usages;
global_term_info_g = GROUP term_info BY ALL;
global_term_info = FOREACH global_term_info_g GENERATE
    COUNT_STAR(term_info) AS num_terms,
    SUM(term_usages) AS global_usages;
STORE global_term_info INTO '/data/work/geo_flavor/global_term_info';
----

(The actual code is somewhat different from what you see here -- we'll explain below)

... (TODO describe term_info)


=== Pattern: Re-injecting global totals

We also extract two global statistics: the number of distinct terms, and the number of distinct usages. This brings up one of the more annoying things about Hadoop programming. The global_term_info result is two lousy values, needed to turn the global _counts_ for each term into the global _frequency_ for each term. But a pig script just orchestrates the top-level motion of data: there's no intrinsic way to bring the result of a step into the declaration of following steps. The proper recourse is to split the script into two parts, and run it within a workflow tool like Rake, Drake or Oozie. The workflow layer can fish those values out of the HDFS and inject them as runtime parameters into the next stage of the script.

We prefer to cheat. We instead ran a version of the script that found the global count of terms and usages, then copy/pasted their values as static parameters at the top of the script. This also lets us calculate the ppm frequency of each term and the other term statistics in a single pass. To ensure our time-traveling shenanigans remain valid, we add an `ASSERT` statement which compares the memoized values to the actual totals.

----
DEFINE memoized_num_terms XXX;
DEFINE memoized_global_usages XXX;
all_terms = GROUP term_cell_freqs BY term;
term_info_1 = FOREACH all_terms GENERATE
    group AS term,
    COUNT_STAR(term_cell_freqs) AS num_articles,
    SUM(article_term_usages) AS term_usages,
    1000000 * SUM(article_term_usages)/memoized_global_usages AS term_ppm:double
    ;
-- Validate the global term statistics
global_term_info_g = GROUP term_info BY ALL;
global_term_info = FOREACH global_term_info_g GENERATE
   COUNT_STAR(term_info) AS num_terms,
   SUM(term_usages) AS global_usages;
STORE global_term_info INTO '/data/work/geo_flavor/global_term_info';
ASSERT(global_term_info.num_terms = memoized_num_terms);
ASSERT(global_term_info.global_usages = memoized_global_usages);
----

(TODO: just realized the way we've done this finds global term stats on only geolocated articles. To find them on all articles will complicate the script: we have to do a left join and then filter, or we'd have to do wordbags first then join on geolocations.)



==== A pause, to think

Let's look at the fundamental pattern that we're using. Our steps:

. transform each article individually into its wordbag
// . convert each article's precise point into the coarse-grained tile it sits on
. augment the wordbags with their geo coordinates by joining on page ID
. organize the wordbags into groups having the same grid cell;
. form a single combined wordbag for each grid cell.

//// Consider adding some text here that guides the reader with regard to the findings they might expect to result.  For example, "...if you were to use the example of finding symptoms that intersect with illness as part of an epidemic, you would have done x, y, and z..."  This will bring the activity to life and help readers appreciate how it applies to thier own data at hand.  Amy////

It's a sequence of _transforms_ (operations on each record in isolation: steps 1 and 4) and _pivots_ -- operations that combine records, whether from different tables (the join in step 2) or the same dataset (the group in step 3).

In doing so, we've turned articles that have a geolocation into coarse-grained regions that have implied frequencies for words. The particular frequencies arise from this combination of forces:

* _signal_: Terms that describe aspects of the human condition specific to each region, like "longhorns" or "barbecue", and direct references to place names, such as "Austin" or "Texas"
* _background_: The natural frequency of each term -- "second" is used more often than "syzygy" -- slanted by its frequency in geo-locatable texts (the word "town" occurs far more frequently than its natural rate, simply because towns are geolocatable).
* _noise_: Deviations introduced by the fact that we have a limited sample of text to draw inferences from.

Our next task -- the sprint home -- is to use a few more transforms and pivots to separate the signal from the background and, as far as possible, from the noise.

==== Pulling signal from noise

To isolate the signal, we'll pull out a trick called <<pmi,"Pointwise Mutual Information" (PMI)>>. Though it may sound like an insurance holding company, in fact PMI is a simple approach to isolate the noise and background. It compares the following:

* the rate the term 'barbecue' is used
* the rate that terms are used on grid cell 023130130
* the rate the term 'barbecue' is used on grid cell 023130130

Just as above, we can transform and pivot to get those figures:

* group the data by term; count occurrences
* group the data by tile; count occurrences
* group the data by term and tile; count occurrences
* count total occurrences
* combine those counts into rates, and form the PMI scores.

Rather than step through each operation, I'll wave my hands and pull its output from the oven:

------
023130130 {(("texas",X),...,("longhorns",X),...("bbq",X),...,...}
------

As expected, in <<baldridge_bbq_wine>> you see BBQ loom large over Texas and the Southern US; Wine, over the Napa Valleyfootnote:[This is a simplified version of work by Jason Baldrige, Ben Wing (TODO: rest of authors), who go farther and show how to geolocate texts _based purely on their content_. An article mentioning barbecue and Willie Nelson would be placed near Austin, TX; one mentioning startups and trolleys in San Francisco. See: Baldridge et al (TODO: reference)].

==== Takeaway #1: Start with a Question

We accomplished an elaborate data exploration, yet at no point did we do anything complex. Instead of writing a big hairy monolithic program, we wrote a series of simple scripts that either _transformed_ or _pivoted_ the data.

As you'll see later, the scripts are readable and short (none exceed a few dozen lines of code). They run easily against sample data on your desktop, with no Hadoop cluster in sight; and they will then run, unchanged, against the whole of Wikipedia on dozens or hundreds of machines in a Hadoop cluster.
////This sounds hard to believe.  Consider saying more here, as it comes off as a bit over-simplified.  Amy////

That's the approach we'll follow through this book: develop simple, maintainable transform/pivot scripts by iterating quickly and always keeping the data visible; then confidently transition those scripts to production as the search for a question becomes the rote production of an answer.

The challenge, then, isn't to learn to "program" Hadoop -- it's to learn how to think at scale, to choose a workable series of chess moves connecting the data you have to the insight you need. In the first part of the book, after briefly becoming familiar with the basic framework, we'll proceed through a series of examples to help you identify the key locality and thus the transformation each step calls for. In the second part of that book, we'll apply this to a range of interesting problems and so build up a set of reusable tools for asking deep questions in actual practice.

// ==== Takeaway #2: Locality
// 
// 
// Insight comes from data in context: places in the context of associated topics, or topics in the // context of associated locations. When your data is far too large to fit on a single machine,
// 
// In the second case, putting every word in context of all associated locations requires that 


==== Exemplars and Touchstones

There are three touchstones to hit in every data exploration:

* Confirm the things you know:
* Confirm or refute the things you suspect.
* Uncover at least one thing you never suspected.

Things we know: First, common words should show no geographic flavor. 
Geographic features -- "beach", "mountain", etc -- should be intensely localised.
* compared to other color words, there will be a larger regional variation for the terms "white" and "black" (as they describe ra
You don't have to stop exploring when you find a new mystery, but no data exploration is complete until you uncover at least one.

We will jointly discover two things
taking as a whole the terms that have a strong geographic flavor, we should largely see cultural terms (foods, sports, etc)
Next, we'll choose some _exemplars_: familiar records to trace through "Barbeque" should cover ;

* https://github.com/Ganglion/varaha/blob/master/src/main/java/varaha/text/TokenizeText.java




------
stream do |article|
  words = Wukong::TextUtils.tokenize(article.text, remove_stopwords: true)
  words.group_by(&:to_s).map{|word, occurs|
    yield [article.id, word, occurs.count]
  end
end
------

Reading it as prose the script says "for each article: break it into a list of words; group all occurrences of each word and count them; then output the article id, word and count."



.Snippet from the Wikipedia article on "Barbecue"
[quote, wikipedia, http://en.wikipedia.org/wiki/Barbeque]
____
Each Southern locale has its own particular variety of barbecue, particularly concerning the sauce. North Carolina sauces vary by region; eastern North Carolina uses a vinegar-based sauce, the center of the state enjoys Lexington-style barbecue which uses a combination of ketchup and vinegar as their base, and western North Carolina uses a heavier ketchup base. Lexington boasts of being "The Barbecue Capital of the World" and it has more than one BBQ restaurant per 1,000 residents. In much of the world outside of the American South, barbecue has a close association with Texas. Many barbecue restaurants outside the United States claim to serve "Texas barbecue", regardless of the style they actually serve. Texas barbecue is often assumed to be primarily beef. This assumption, along with the inclusive term "Texas barbecue", is an oversimplification. Texas has four main styles, all with different flavors, different cooking methods, different ingredients, and different cultural origins. In the June 2008 issue of Texas Monthly Magazine Snow's BBQ in Lexington was rated as the best BBQ in the state of Texas. This ranking was reinforced when New Yorker Magazine also claimed that Snow's BBQ was "The Best Texas BBQ in the World".


=== Pointwise Mutual Information

[[pmi]]

Pointwise Mutual Information sounds like an Insurance holding company, but is in fact a simple way // to expose signal from background.

Let's pick up the example from <<first_exploration>>

* rate the word 'barbecue' is used
* rate that words are used on grid cell 023130130
* rate the word 'barbecue' is used on grid cell 023130130

	pmi(x; y) := log[ p(x, y) / (p(x)*p(y))

	<math>
	\operatorname{pmi}(x;y) \equiv \log\frac{p(x,y)}{p(x)p(y)} = \log\frac{p(x|y)}{p(x)} = // \log\frac{p(y|x)}{p(y)}.
	</math>

==== Smoothing the counts ====

The count of each word is an imperfect estimate of the probability of seeing that word in the context of the given topic. Consider for instance the words that would have shown up if the article were 50% longer, or the cases where an author chose one synonym out of many equivalents. This is particularly significant considering words with zero count.

We want to treat "missing" terms as having occurred some number of times, and adjust the probabilities of all the observed terms.

.Minimally Invasive
[NOTE]
===============================
It's essential to use "minimally invasive" methods to address confounding factors.

What we're trying to do is expose a pattern that we believe is robust: that it will shine through any occlusions in the data. Occasionally, as here, we need to directly remove some confounding factor. The naive practitioner thinks, "I will use a powerful algorithm! That's good, because powerful is better than not powerful!" No -- simple and clear is better than powerful.

Suppose you were instead telling a story set in space - somehow or another, you must address the complication of faster-than-light travel. Star Wars does this early and well: its choices ("Ships can jump to faraway points in space, but not from too close to a planet and only after calculations taking several seconds; it happens instantaneously, causing nearby stars to appear as nifty blue tracks") are made clear in a few deft lines of dialog.

A ham-handed sci-fi author instead brings in complicated machinery requiring a complicated explanation resulting in complicated dialogue. There are two obvious problems: first, the added detail makes the story less clear. It's literally not rocket science: concentrate on heros and the triumph over darkness, not on rocket engines. Second, writing that dialog is wasted work. If it's enough to just have the Wookiee hit the computer with a large wrench, do that.

But it's essential to appreciate that this also _introduces extra confounding factors_. Rather than a nifty special effect and a few lines shouted by a space cowboy at his hairy sidekick, your junkheap space freighter now needs an astrophysicist, a whiteboard and a reason to have the one use the other. The story isn't just muddier, it's flawed.

We're trying to tell a story ("words have regional flavor"), but the plot requires a few essential clarifications ("low-frequency terms are imperfectly estimated").  If these patterns are robust, complicated machinery is detrimental. It confuses the audience, and is more work for you; it can also bring more pattern to the data than is actually there, perverting your results.

The only time you should bring in something complicated or novel is when it's a _central_ element of your story. In that case, it's worth spending multiple scenes in which Jedi masters show and tell the mechanics and limitations of The Force.
===============================

There are two reasonable strategies: be lazy; or consult a sensible mathematician.

To be lazy, add a 'pseudocount' to each term: pretend you saw it an extra small number of times For the common pseudocount choice of 0.5, you would treat absent terms as having been seen 0.5 times, terms observed once as having been seen 1.5 times, and so forth.  Calclulate probabilities using the adjusted count divided by the sum of all adjusted counts (so that they sum to 1). It's not well-justified mathematically, but is easy to code.

Consult a mathematician: for something that is mathematically justifiable, yet still simple enough to be minimally invasive, she will recommend "Good-Turing" smoothing.

In this approach, we expand the dataset to include both the pool of counter for terms we saw, and an "absent" pool of fractional counts, to be shared by all the terms we _didn't_ see. Good-Turing says to count the terms that occurred once, and guess that an equal quantity of things _would_ have occurred once, but didn't. This is handwavy, but minimally invasive; we oughtn't say too much about the things we definitionally can't say much about. 

We then make the following adjustments:

* Set the total _count_ of words in the absent pool equal to the number of terms that occur once. There are of course tons of terms in this pool; we'll give each some small fractional share of an appearance.
* Specifically, treat each absent term as occupying the same share of the absent pool as it does in the whole corpus (minus this doc). So, if "banana" does not appear in the document, but occurs at (TODO: value) ppm across all docs, we'll treat it as occupying the same fraction of the absent pool (with slight correction for the absence of this doc).
* Finally, estimate the probability for each present term as its count divided by the total count in the present and absent pools.

// 	def ct_doc(doc)
//     	  ct_wds_for_doc(doc).sum{|wd, ct| ct }
// 	end
// 
// 	def fr_doc_wd(doc, wd)
// 	  ct_doc_wd(doc, wd)  / ct_doc(doc)
// 	end
// 
// 	# estimate the total frequency of all absent words
// 	# as the total frequency of words appearing exactly once
// 	p_allabsent_for_doc(doc)
// 	  ct_once = ct_wds_for_doc(doc).select{|wd, ct| ct == 1 }
// 	  ct_once / ct_doc(doc)
// 	end
// 
// 	# global frequency of term among terms _not_ in document
// 	def fr_wd_notdoc(wd, doc)
//   	  # contribution of this doc to the all-doc totals
// 	  sumfreq_doc = fr_wds_doc(doc).sum{|wd, _| fr_wd_all(wd) }
// 	  # global frequency with correction
// 	  fr_wd(wd) / (1 - sumfreq_doc)
// 	end
// 
// 	def p_wd_for_doc(doc, wd)
// 	  pabs = p_allabsent_for_doc(doc)
// 	  if absent
// 	    # frequency share of the absent pool, times the corrected global frequency of the term
// 	    result =    pabs  * fr_wd_notdoc(wd, doc)
// 	  else
// 	    # frequency share of the present pool, times the observed frequency of the term
// 	    result = (1-pabs) * fr_wd_doc(doc, wd)
// 	  end
// 	end
// 



