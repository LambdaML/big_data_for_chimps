[[cheatsheets]]
== Appendix: Cheatsheets

=== Regular Expressions

http://www.debuggex.com/?re=big(.+)\bd...&str=big-data-for-chimps

[[regexp_cheatsheet]]
.Regular Expression Cheatsheet
[options="header"]
|=======
| character			| meaning
|				|
| TODO				|
|				|
| `.`				| any character
| `\w`				| any word character: a-z, A-Z, 0-9 or `_` underscore. Use `[:word:]` to match extended alphanumeric characters (accented characters and so forth)
| `\s`				| any whitespace, whether space, tab (`\t`), newline (`\n`) or carriage return (`\r`).
| `\d`				| 
| `\x42` (or any number)	| the character with that hexadecimal encoding. 
| `\b`				| word boundary (zero-width)
| `^`				| start of line; use `\\A` for start of string (disregarding newlines). (zero-width)
| `$`				| end of line; use `\\z` for end of string (disregarding newlines). (zero-width)
| `[^a-mA-M]`			| match character in set
| `[a-mA-M]`			| reject characters in set
| `a\|b\|c`			| a or b or c
| `(...)`			| group
| `(?:...)`			| non-capturing group
| `(?<varname>...)`		| named group
|				|
| `*`, `+`			| zero or more, one or more. greedy (captures the longest possible match)
| `*?`, `+?`			| non-greedy zero-or-more, non-greedy one-or-more
| `{n,m}`			| repeats `n` or more, but `m` or fewer times
|				|
|=======

=== Simple Characters

This shows the sort order of the simple (7-bit) ascii characters, along with the primary regular expression escapes they match.

[[regexp_examples]]
.Example Regular Expressions
[options="header"]
|=======
| Name           	  | Hex 	| Representation          	| Word	| Whitespace	| Control
| Control Characters I	  | `\x00-\x08`	| 				|   	| 		| \c	|
| Whitespace		  | `\x09-\x0d`	| `\t`, `\n` `\v`, `\f`, `\r`	|   	| \s		| \c	|
| Control Characters II	  | `\x0e-\x1f`	| 			        |   	| 		| \c	|
| Space			  | `\x20`    	| ` `			        |   	| \s		| 	|
| Punctuation I		  | `\x21-\x2f`	| `!"#$%&'()*+,-./`	        |   	| 		| 	|
| Numerals		  | `\x30-\x39`	| `0-9`			       	|   \w	| 		| 	|
| Punctuation II	  | `\x3a-\x40`	| `:;<=>?@`		        |   	| 		| 	|
| Uppercase		  | `\x41-\x5a`	| `A-Z`			       	|   \w	| 		| 	|
| Punctuation IV	  | `\x5b-\x60`	| `[\\]^_``			|   	| 		| 	|
| Lowercase		  | `\x61-\x7a`	| `a-z`				|   \w	| 		| 	|
| Punctuation V		  | `\x7b-\x7e`	| `{|}~`			|   	| 		| 	|
| Control Characters III  | `\x7f-\x80`	| 				|   	| 		| \c	|
|=======

=== Useful Regular Expression Examples

These <<regexp_examples>> are for practical _extraction_ (identifying potential examples), not validation (ensuring correctness). They may let nitpicks through that oughtn't: a time zone of `-0000` is illegal by the spec, but will pass the date regexp given below. As always, modify them in your actual code to be as restrictively brittle as reasonable.

[[regexp_examples]]
.Example Regular Expressions
[options="header"]
|=======
| intent			| Regular Expression    				| Comment
| Double-quoted string		| `%r{"((?:\\.|[^\"])*)"}`  		        	| all backslash-escaped character, or non-quotes, up to first quote
| Decimal number with sign	| `%r{([\-\+\d]+\.\d+)}`                            	| optional sign; digits-dot-digits
| Floating-point number 	| `%r{([\+\-]?\d+\.\d+(?:[eE][\+\-]?\d+)?)}`       	| optional sign; digits-dot-digits; optional exponent
| ISO date               	| `%r{\b(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)([\+\-]\d\d:?\d\d|[\+\-]\d\d|Z)\b}`	| Capture groups are the year, month, day, hour, minute, second and time zone respectively.
| URL |
| Email Address | 
| Emoticon | (see sample code)
|=======

=== Hadoop Filesystem Commands ===

[[hadoop_filesystem_commands]]
.Hadoop Filesystem Commands
[options="header"]
|=======
| action			| command
|				|
| list files			| `hadoop fs -ls`
| list files' disk usage	| `hadoop fs -du`
| total HDFS usage/available	| visit namenode console
|				|
|				|
| copy local -> HDFS		|
| copy HDFS -> local		|
| copy HDFS -> remote HDFS	|
|				|
| make a directory		| `hadoop fs -mkdir ${DIR}`
| move/rename			| `hadoop fs -mv ${FILE}`
| dump file to console		| `hadoop fs -cat ${FILE} \| cut -c 10000 \| head -n 10000`
|				|
|				|
| remove a file			|
| remove a directory tree	|
| remove a file, skipping Trash	|
| empty the trash NOW		|
|				|
| health check of HDFS		|
| report block usage of files	|
|				|
| decommission nodes		|
|				|
|				|
| list running jobs		|
| kill a job			|
| kill a task attempt		|
|				|
|				|
| CPU usage by process		| `htop`, or `top` if that's not installed
| Disk activity			|
| Network activity		|
|				|
|				| `grep -e '[regexp]'`
|				| `head`, `tail`
|				| `wc`
|				| `uniq -c`
|				| `sort -n -k2`
| tuning                        | csshX, htop, dstat, ulimit
|
| also useful:                  | cat, echo, true, false, yes, tee, time, watch, time
| dos-to-unix line endings	| `ruby -ne 'puts $_.gsub(/\r\n?/, "\n")'`
|				|
|				|
|======

=== Unix Filesystem Commands ===

[[commandline_tricks]]
.UNIX commandline tricks
[options="header"]
|=======
| action			| command             		| Flags
| Sort data                     | `sort`              		| reverse the sort: `-r`; sort numerically: `-n`; sort on a field: `-t [delimiter] -k [index]` 
| Sort large amount of data     | `sort --parallel=4 -S 500M` 	| use four cores and a 500 megabyte sort buffer
| Cut delimited field           | `cut -f 1,3-7 -d ','`   	| emit comma-separated fields one and three through seven
| Cut range of characters       | `cut -c 1,3-7`          	| emit characters one and three through seven
| Split on spaces               | `| ruby -ne 'puts $_.split(/\\s+/).join("\t")'` | split on continuous runs of whitespace, re-emit as tab-separated
| Distinct fields               | `| sort | uniq`      		| only dupes: `-d`
| Quickie histogram             | `| sort | uniq -c`   		| TODO: check the rendering for backslash
| Per-process usage             | `htop`                        | Installed 
| Running system usage          | `dstat -drnycmf -t 5`  	| 5-second rolling system stats. You likely will have to http://dag.wieers.com/home-made/dstat/[install dstat] yourself. If that's not an option, use `iostat -x 5 & sleep 3 ; ifstat 5` for an interleaved 5-second running average.
|======

For example: `cat * | cut -c 1-4 | sort | uniq -c` cuts the first 4-character

Not all commands available on all platforms; OSX users should use Homebrew, Windows users should use Cygwin.

=== Pig Operators ===

[[pig_cheatsheet]]
.Pig Operator Cheatsheet
[options="header"]
|=======
| action			| operator
|				|
|				| JOIN
|				| FILTER
|				|
|=======


=== Hadoop Tunables Cheatsheet




=== SQL-to-Pig-to-Hive Cheatsheet

* SELECT..WHERE
* SELECT...LIMit
* GROUP BY...HAVING
* SELECT WHERE... ORDER BY
* SELECT WHERE... SORT BY (just use reducer sort) ~~ (does reducer in Pig guarantee this?)
* SELECT … DISTRIBUTE BY … SORT BY ...
* SELECT ... CLUSTER BY (equiv of distribute by X sort by X)
* Indexing tips
* CASE...when...then
* Block Sampling / Input pruning
* SELECT country_name, indicator_name, `2011` AS trade_2011 FROM wdi WHERE (indicator_name = 'Trade (% of GDP)' OR indicator_name = 'Broad money (% of GDP)') AND `2011` IS NOT NULL CLUSTER BY indicator_name;

SELECT columns or computations FROM table WHERE condition GROUP BY columns HAVING condition ORDER BY column  [ASC | DESC] LIMIT offset,count;
